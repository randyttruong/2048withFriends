{"ast":null,"code":"export const initialState = {\n  tiles: {},\n  byIds: [],\n  hasChanged: false,\n  inMotion: false\n};\nexport const GameReducer = (state, action) => {\n  switch (action.type) {\n    case \"CREATE_TILE\":\n      return {\n        ...state,\n        tiles: {\n          ...state.tiles,\n          [action.tile.id]: action.tile\n        },\n        byIds: [...state.byIds, action.tile.id],\n        hasChanged: false\n      };\n    case \"UPDATE_TILE\":\n      return {\n        ...state,\n        tiles: {\n          ...state.tiles,\n          [action.tile.id]: action.tile\n        },\n        hasChanged: true\n      };\n    case \"MERGE_TILE\":\n      const {\n        [action.source.id]: source,\n        [action.destination.id]: destination,\n        ...restTiles\n      } = state.tiles;\n      return {\n        ...state,\n        tiles: {\n          ...restTiles,\n          [action.destination.id]: {\n            id: action.destination.id,\n            value: action.source.value + action.destination.value,\n            position: action.destination.position\n          }\n        },\n        byIds: state.byIds.filter(id => id !== action.source.id),\n        hasChanged: true\n      };\n    case \"START_MOVE\":\n      return {\n        ...state,\n        inMotion: true\n      };\n    case \"END_MOVE\":\n      return {\n        ...state,\n        inMotion: false\n      };\n    default:\n      return state;\n  }\n};\n_c = GameReducer;\nvar _c;\n$RefreshReg$(_c, \"GameReducer\");","map":{"version":3,"names":["initialState","tiles","byIds","hasChanged","inMotion","GameReducer","state","action","type","tile","id","source","destination","restTiles","value","position","filter","_c","$RefreshReg$"],"sources":["/home/randyt/projects/2048final/src/components/Game/hooks/useGame/reducer.ts"],"sourcesContent":["import { TileMeta } from \"../../../Tile\";\n\ntype State = {\n  tiles: {\n    [id: number]: TileMeta;\n  };\n  inMotion: boolean;\n  hasChanged: boolean;\n  byIds: number[];\n};\n\nexport const initialState: State = {\n  tiles: {},\n  byIds: [],\n  hasChanged: false,\n  inMotion: false,\n};\n\ntype Action =\n  | { type: \"CREATE_TILE\"; tile: TileMeta }\n  | { type: \"UPDATE_TILE\"; tile: TileMeta }\n  | { type: \"MERGE_TILE\"; source: TileMeta; destination: TileMeta }\n  | { type: \"START_MOVE\" }\n  | { type: \"END_MOVE\" };\n\nexport const GameReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case \"CREATE_TILE\":\n      return {\n        ...state,\n        tiles: {\n          ...state.tiles,\n          [action.tile.id]: action.tile,\n        },\n        byIds: [...state.byIds, action.tile.id],\n        hasChanged: false,\n      };\n    case \"UPDATE_TILE\":\n      return {\n        ...state,\n        tiles: {\n          ...state.tiles,\n          [action.tile.id]: action.tile,\n        },\n        hasChanged: true,\n      };\n    case \"MERGE_TILE\":\n      const {\n        [action.source.id]: source,\n        [action.destination.id]: destination,\n        ...restTiles\n      } = state.tiles;\n      return {\n        ...state,\n        tiles: {\n          ...restTiles,\n          [action.destination.id]: {\n            id: action.destination.id,\n            value: action.source.value + action.destination.value,\n            position: action.destination.position,\n          },\n        },\n        byIds: state.byIds.filter((id) => id !== action.source.id),\n        hasChanged: true,\n      };\n    case \"START_MOVE\":\n      return {\n        ...state,\n        inMotion: true,\n      };\n    case \"END_MOVE\":\n      return {\n        ...state,\n        inMotion: false,\n      };\n    default:\n      return state;\n  }\n};\n"],"mappings":"AAWA,OAAO,MAAMA,YAAmB,GAAG;EACjCC,KAAK,EAAE,CAAC,CAAC;EACTC,KAAK,EAAE,EAAE;EACTC,UAAU,EAAE,KAAK;EACjBC,QAAQ,EAAE;AACZ,CAAC;AASD,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAY,EAAEC,MAAc,KAAK;EAC3D,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO;QACL,GAAGF,KAAK;QACRL,KAAK,EAAE;UACL,GAAGK,KAAK,CAACL,KAAK;UACd,CAACM,MAAM,CAACE,IAAI,CAACC,EAAE,GAAGH,MAAM,CAACE;QAC3B,CAAC;QACDP,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,EAAEK,MAAM,CAACE,IAAI,CAACC,EAAE,CAAC;QACvCP,UAAU,EAAE;MACd,CAAC;IACH,KAAK,aAAa;MAChB,OAAO;QACL,GAAGG,KAAK;QACRL,KAAK,EAAE;UACL,GAAGK,KAAK,CAACL,KAAK;UACd,CAACM,MAAM,CAACE,IAAI,CAACC,EAAE,GAAGH,MAAM,CAACE;QAC3B,CAAC;QACDN,UAAU,EAAE;MACd,CAAC;IACH,KAAK,YAAY;MACf,MAAM;QACJ,CAACI,MAAM,CAACI,MAAM,CAACD,EAAE,GAAGC,MAAM;QAC1B,CAACJ,MAAM,CAACK,WAAW,CAACF,EAAE,GAAGE,WAAW;QACpC,GAAGC;MACL,CAAC,GAAGP,KAAK,CAACL,KAAK;MACf,OAAO;QACL,GAAGK,KAAK;QACRL,KAAK,EAAE;UACL,GAAGY,SAAS;UACZ,CAACN,MAAM,CAACK,WAAW,CAACF,EAAE,GAAG;YACvBA,EAAE,EAAEH,MAAM,CAACK,WAAW,CAACF,EAAE;YACzBI,KAAK,EAAEP,MAAM,CAACI,MAAM,CAACG,KAAK,GAAGP,MAAM,CAACK,WAAW,CAACE,KAAK;YACrDC,QAAQ,EAAER,MAAM,CAACK,WAAW,CAACG;UAC/B;QACF,CAAC;QACDb,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACc,MAAM,CAAEN,EAAE,IAAKA,EAAE,KAAKH,MAAM,CAACI,MAAM,CAACD,EAAE,CAAC;QAC1DP,UAAU,EAAE;MACd,CAAC;IACH,KAAK,YAAY;MACf,OAAO;QACL,GAAGG,KAAK;QACRF,QAAQ,EAAE;MACZ,CAAC;IACH,KAAK,UAAU;MACb,OAAO;QACL,GAAGE,KAAK;QACRF,QAAQ,EAAE;MACZ,CAAC;IACH;MACE,OAAOE,KAAK;EAChB;AACF,CAAC;AAACW,EAAA,GArDWZ,WAAW;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}