{"ast":null,"code":"var _jsxFileName = \"/home/randyt/projects/2048final/src/components/Tile/Tile.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport invariant from \"tiny-invariant\";\nimport { usePrevProps } from \"../../hooks/usePrevProps\";\nimport { useBoard } from \"../Board\";\nimport \"./tile.less\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Tile = ({\n  value,\n  position,\n  zIndex\n}) => {\n  _s();\n  // retrieves board properties\n  const [containerWidth, tileCount] = useBoard();\n  //  state required to animate the highlight\n  const [scale, setScale] = useState(1);\n\n  // the previous value (prop) - it is undefined if it is a new tile.\n  const previousValue = usePrevProps(value);\n\n  // check if tile is within the board boundries\n  const withinBoardBoundaries = position[0] < tileCount && position[1] < tileCount;\n  invariant(withinBoardBoundaries, \"Tile out of bound\");\n\n  // if it is a new tile...\n  const isNew = previousValue === undefined;\n  // ...or its value has changed...\n  const hasChanged = previousValue !== value;\n  // ... then the tile should be highlighted.\n  const shallHighlight = isNew || hasChanged;\n\n  // useEffect will decide if highlight should be triggered.\n  useEffect(() => {\n    if (shallHighlight) {\n      setScale(1.1);\n      setTimeout(() => setScale(1), 100);\n    }\n  }, [shallHighlight, scale]);\n\n  /**\n   * Converts tile position from array index to pixels.\n   */\n  const positionToPixels = position => {\n    return position / tileCount * containerWidth;\n  };\n\n  // all animations come from CSS transition, and we pass them as styles\n  const style = {\n    top: positionToPixels(position[1]),\n    left: positionToPixels(position[0]),\n    transform: `scale(${scale})`,\n    zIndex\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `tile tile-${value}`,\n    style: style,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Tile, \"tTjKCLLD61qKYnMx3jqiM+u0AVI=\", false, function () {\n  return [useBoard, usePrevProps];\n});\n_c = Tile;\nvar _c;\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"names":["React","useEffect","useState","invariant","usePrevProps","useBoard","jsxDEV","_jsxDEV","Tile","value","position","zIndex","_s","containerWidth","tileCount","scale","setScale","previousValue","withinBoardBoundaries","isNew","undefined","hasChanged","shallHighlight","setTimeout","positionToPixels","style","top","left","transform","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/randyt/projects/2048final/src/components/Tile/Tile.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport invariant from \"tiny-invariant\";\nimport { usePrevProps } from \"../../hooks/usePrevProps\";\nimport { useBoard } from \"../Board\";\nimport \"./tile.less\";\n\ntype Props = {\n  // tile value - 2, 4, 8, 16, 32, ..., 2048.âˆ‚\n  value: number;\n  // an array containing the x and y index on the board.\n  position: [number, number];\n  // the order of tile on the tile stack.\n  zIndex: number;\n};\n\nexport const Tile = ({ value, position, zIndex }: Props) => {\n  // retrieves board properties\n  const [containerWidth, tileCount] = useBoard();\n  //  state required to animate the highlight\n  const [scale, setScale] = useState(1);\n\n  // the previous value (prop) - it is undefined if it is a new tile.\n  const previousValue = usePrevProps<number>(value);\n\n  // check if tile is within the board boundries\n  const withinBoardBoundaries =\n    position[0] < tileCount && position[1] < tileCount;\n  invariant(withinBoardBoundaries, \"Tile out of bound\");\n\n  // if it is a new tile...\n  const isNew = previousValue === undefined;\n  // ...or its value has changed...\n  const hasChanged = previousValue !== value;\n  // ... then the tile should be highlighted.\n  const shallHighlight = isNew || hasChanged;\n\n  // useEffect will decide if highlight should be triggered.\n  useEffect(() => {\n    if (shallHighlight) {\n      setScale(1.1);\n      setTimeout(() => setScale(1), 100);\n    }\n  }, [shallHighlight, scale]);\n\n  /**\n   * Converts tile position from array index to pixels.\n   */\n  const positionToPixels = (position: number) => {\n    return (position / tileCount) * (containerWidth as number);\n  };\n\n  // all animations come from CSS transition, and we pass them as styles\n  const style = {\n    top: positionToPixels(position[1]),\n    left: positionToPixels(position[0]),\n    transform: `scale(${scale})`,\n    zIndex,\n  };\n\n  return (\n    <div className={`tile tile-${value}`} style={style}>\n      {value}\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,gBAAgB;AACtC,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,QAAQ,QAAQ,UAAU;AACnC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWrB,OAAO,MAAMC,IAAI,GAAGA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAC1D;EACA,MAAM,CAACC,cAAc,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAC9C;EACA,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;;EAErC;EACA,MAAMe,aAAa,GAAGb,YAAY,CAASK,KAAK,CAAC;;EAEjD;EACA,MAAMS,qBAAqB,GACzBR,QAAQ,CAAC,CAAC,CAAC,GAAGI,SAAS,IAAIJ,QAAQ,CAAC,CAAC,CAAC,GAAGI,SAAS;EACpDX,SAAS,CAACe,qBAAqB,EAAE,mBAAmB,CAAC;;EAErD;EACA,MAAMC,KAAK,GAAGF,aAAa,KAAKG,SAAS;EACzC;EACA,MAAMC,UAAU,GAAGJ,aAAa,KAAKR,KAAK;EAC1C;EACA,MAAMa,cAAc,GAAGH,KAAK,IAAIE,UAAU;;EAE1C;EACApB,SAAS,CAAC,MAAM;IACd,IAAIqB,cAAc,EAAE;MAClBN,QAAQ,CAAC,GAAG,CAAC;MACbO,UAAU,CAAC,MAAMP,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;IACpC;EACF,CAAC,EAAE,CAACM,cAAc,EAAEP,KAAK,CAAC,CAAC;;EAE3B;AACF;AACA;EACE,MAAMS,gBAAgB,GAAId,QAAgB,IAAK;IAC7C,OAAQA,QAAQ,GAAGI,SAAS,GAAKD,cAAyB;EAC5D,CAAC;;EAED;EACA,MAAMY,KAAK,GAAG;IACZC,GAAG,EAAEF,gBAAgB,CAACd,QAAQ,CAAC,CAAC,CAAC,CAAC;IAClCiB,IAAI,EAAEH,gBAAgB,CAACd,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnCkB,SAAS,EAAG,SAAQb,KAAM,GAAE;IAC5BJ;EACF,CAAC;EAED,oBACEJ,OAAA;IAAKsB,SAAS,EAAG,aAAYpB,KAAM,EAAE;IAACgB,KAAK,EAAEA,KAAM;IAAAK,QAAA,EAChDrB;EAAK;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtB,EAAA,CAjDWJ,IAAI;EAAA,QAEqBH,QAAQ,EAKtBD,YAAY;AAAA;AAAA+B,EAAA,GAPvB3B,IAAI;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}