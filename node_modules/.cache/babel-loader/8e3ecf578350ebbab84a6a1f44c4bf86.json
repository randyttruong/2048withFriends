{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\n\n/**\n * `usePrevProps` stores the previous value of the prop.\n *\n * @link https://blog.logrocket.com/how-to-get-previous-props-state-with-react-hooks/\n * @param {K} value\n * @returns {K | undefined}\n */\nexport const usePrevProps = value => {\n  _s();\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n_s(usePrevProps, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");","map":{"version":3,"names":["useEffect","useRef","usePrevProps","value","_s","ref","current"],"sources":["/home/randyt/projects/2048final/src/hooks/usePrevProps.ts"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\n/**\n * `usePrevProps` stores the previous value of the prop.\n *\n * @link https://blog.logrocket.com/how-to-get-previous-props-state-with-react-hooks/\n * @param {K} value\n * @returns {K | undefined}\n */\nexport const usePrevProps = <K = any>(value: K) => {\n  const ref = useRef<K>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n};\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAaC,KAAQ,IAAK;EAAAC,EAAA;EACjD,MAAMC,GAAG,GAAGJ,MAAM,CAAI,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACdK,GAAG,CAACC,OAAO,GAAGH,KAAK;EACrB,CAAC,CAAC;EAEF,OAAOE,GAAG,CAACC,OAAO;AACpB,CAAC;AAACF,EAAA,CARWF,YAAY"},"metadata":{},"sourceType":"module"}